name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:

jobs:
  format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8

    - name: Lint with flake8
      run: |
        flake8 src tests

    - name: Format with black
      run: |
        black src tests

    - name: Import sort with isort
      run: |
        isort src tests

  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }})
    runs-on: ${{ matrix.platform }}
    needs: format
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: "pyproject.toml"
          cache: "pip"
      - name: Install dependencies
        run: |
          pip install -U pip
          pip install torch
          pip install .[test]
      - name: Test
        run: pytest --color=yes --cov --cov-report=xml --cov-report=term-missing
      - name: Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # tag-release:
  #   name: Tag Release
  #   needs: test
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tag: ${{ steps.get_tag.outputs.tag }}
  #   if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Get version from CITATION.cff
  #       id: get_tag
  #       run: |
  #         tag=$(grep '^version:' CITATION.cff | sed 's/version: //')
  #         echo "tag=$tag" >> $GITHUB_OUTPUT
  #         echo "Found version: $tag"
  #     - name: Check if tag already exists
  #       run: |
  #         if git rev-parse "${{ steps.get_tag.outputs.tag }}" >/dev/null 2>&1; then
  #           echo "Tag ${{ steps.get_tag.outputs.tag }} already exists, skipping release"
  #           exit 1
  #         fi
  #     - name: Create and push tag
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git tag ${{ steps.get_tag.outputs.tag }}
  #         git push origin ${{ steps.get_tag.outputs.tag }}
  #     - name: Create GitHub Release with Notes
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         gh release create ${{ steps.get_tag.outputs.tag }} --generate-notes --title "${{ steps.get_tag.outputs.tag }}"

  # publish:
  #   name: Publish
  #   needs: tag-release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         ref: ${{ needs.tag-release.outputs.tag }}
  #     - name: Fetch latest tags
  #       run: git fetch --tags origin
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.x"
  #     - name: Install build tools
  #       run: pip install -U pip hatch twine
  #     - name: Build sdist and wheel
  #       run: hatch build -t sdist -t wheel
  #     - name: Check distributions
  #       run: twine check dist/*
  #     - name: Publish to PyPI
  #       run: twine upload dist/*
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
